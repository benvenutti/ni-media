language: cpp
sudo: required
dist: trusty
  
git:
  depth: 3

env:
  global:
    - DEPS_DIR=${HOME}/deps

matrix:
  include:
    - os: osx
      osx_image: xcode9.4
      compiler: clang
      env: MATRIX_EVAL="CONFIG=Release && RUN_PCM_TESTS=ON"
      
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-5

      env: MATRIX_EVAL="CONFIG=Release && CXX=g++-5 && RUN_PCM_TESTS=ON"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-5
          - lcov

      env: MATRIX_EVAL="CONFIG=Coverage && CXX=g++-5 && GCOV=gcov-5 && RUN_PCM_TESTS=OFF"

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - mkdir -p ${DEPS_DIR}/vcpkg
  - cd ${DEPS_DIR}/vcpkg
  - git clone https://github.com/Microsoft/vcpkg.git
  - ./bootstrap-vcpkg.sh
  - echo -e '\nset(VCPKG_BUILD_TYPE release)' >> ./triplets/${VCPKG_TRIPLET}.cmake
  - ./vcpkg install boost-algorithm:custom-triplet
  - ./vcpkg install boost-endian:custom-triplet
  - ./vcpkg install boost-filesystem:custom-triplet
  - ./vcpkg install boost-format:custom-triplet
  - ./vcpkg install boost-icl:custom-triplet
  - ./vcpkg install boost-iostreams:custom-triplet
  - ./vcpkg install boost-program-options:custom-triplet
  - ./vcpkg install boost-system:custom-triplet
  - ./vcpkg install gtest:custom-triplet
  - ./vcpkg install libOgg:custom-triplet
  - ./vcpkg install libFlac:custom-triplet
  - ./vcpkg install libVorbis:custom-triplet

before_script:
  - cd $TRAVIS_BUILD_DIR
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=$CONFIG -DNIMEDIA_TREAT_WARNINGS_AS_ERRORS=ON -DNIMEDIA_PCM_TESTS=$RUN_PCM_TESTS -DCMAKE_TOOLCHAIN_FILE=${DEPS_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake ..

script:
  - export CTEST_OUTPUT_ON_FAILURE=TRUE
  - cmake --build . && git lfs pull -X "" && cmake --build . --target test

after_success:
  - if [ "$CONFIG" == "Coverage" ]; then
      lcov --gcov-tool $(which ${GCOV}) -d . -c -o coverage.info;
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi
